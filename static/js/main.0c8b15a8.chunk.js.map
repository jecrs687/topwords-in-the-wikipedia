{"version":3,"sources":["type/mobile/main.js","type/script/main.js","type/desktop/main.js","type/site/main.js","App.js","serviceWorker.js","index.js"],"names":["main","infor","require","colors","className","style","background","analogo","triadic2","backgroundColor","triadic","analogo2","title","split","map","value","description","href","color","primary","info","Boolean","window","location","hostname","match","ReactDOM","render","type","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iyCAGe,SAASA,IACpB,OACI,8B,UCHFC,EAAQC,EAAQ,GAChBC,EAASF,EAAME,OAEN,SAASH,IACpB,OACI,yBAAKI,UAAU,UACX,yBAAKA,UAAU,SAASC,MAAO,CAACC,WAAW,mBAAD,OAAoBH,EAAOI,QAA3B,YAAsCJ,EAAOK,SAA7C,QAClC,yBAAKH,MAAO,CAACI,gBAAgB,GAAD,OAAIN,EAAOO,YACvC,yBAAKL,MAAO,CAACI,gBAAgB,GAAD,OAAIN,EAAOO,YACvC,yBAAKL,MAAO,CAACI,gBAAgB,GAAD,OAAIN,EAAOO,YACvC,yBAAKL,MAAO,CAACI,gBAAgB,GAAD,OAAIN,EAAOO,YAE3C,yBAAKN,UAAU,QAAQC,MAAO,CAACI,gBAAgB,GAAD,OAAIN,EAAOQ,SAAX,QAC1C,4BACKV,EAAMW,MAAMC,MAAM,KAAKC,KAAI,SAAAC,GAAK,iBAAMA,SAKnD,yBAAKX,UAAU,QACX,yBAAKA,UAAU,eACX,2CACA,2BACCH,EAAMe,YAAYF,KAAI,SAAAC,GAAK,cACjBA,UAAgB,GACvB,4BAEIA,EAAMD,KACH,SAAAC,GAAK,cACEA,UAAgB,GACvB,4BACMA,EAAMD,KAAI,SAAAC,GAAK,cACbA,UAAgB,GACvB,4BACKA,EAAMD,KACH,SAAAC,GAAK,OAAE,4BAAKA,OAGnB,4BAAKA,OAGP,4BAAKA,OAKf,2BAAIA,SAKb,yBAAKX,UAAU,UAAf,cACe,uBAAGa,KAAK,6BAA6BZ,MAAO,CAACa,MAAM,GAAD,OAAIf,EAAOgB,WAA7D,eCnDZ,SAASnB,IACpB,OACI,8B,UCHFC,EAAQC,EAAQ,GAEP,SAASF,IACpB,OACI,yBAAKI,UAAU,QACX,yBAAKA,UAAU,UACX,8BACA,8BACA,8BACA,8BACA,yBAAKA,UAAU,SACX,4BACKH,EAAMW,MAAMC,MAAM,KAAKC,KAAI,SAAAC,GAAK,iBAAMA,SAKnD,yBAAKX,UAAU,SAGf,yBAAKA,UAAU,UAAf,WChBZ,IAAMgB,EAAOlB,EAAQ,GCMDmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbN,IAAMxB,EAAQC,EAAS,GAYvBwB,IAASC,OAAO,mBFID,WAEX,OACI,yBAAKvB,UAAU,OAjBvB,WACQ,OAAOgB,EAAKQ,MACR,IAAK,SACD,OAAO,kBAAC,EAAD,MACX,IAAK,UACD,OAAO,kBAAC,EAAD,MACX,IAAK,SACD,OAAO,kBAAC,EAAD,MACX,IAAK,OACD,OAAO,kBAAC,EAAD,MACX,QACI,OAAO,kBAAC,EAAD,OAOV5B,MERG,MAAS6B,SAASC,eAAe,SACjDJ,IAASC,OAAO,mBAXhB,WACI,OACI1B,EAAMW,MAAMC,MAAM,KAAKC,KAAI,SAAAC,GAAK,iBAAMA,QAS9B,MAAUc,SAASC,eAAe,UAClDJ,IAASC,OAAO,mBAPhB,WACI,OACQ,gCAKI,MAAWE,SAASC,eAAe,WDgH7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0c8b15a8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nexport default function main(){\r\n    return(\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport './script.css'\r\nconst infor = require('../../infor.json')\r\nconst colors = infor.colors\r\n\r\nexport default function main(){\r\n    return(\r\n        <div className='Script'>\r\n            <div className=\"header\" style={{background:`linear-gradient(${colors.analogo},${colors.triadic2} )`}}>\r\n                    <div style={{backgroundColor:`${colors.triadic}`}}/>\r\n                    <div style={{backgroundColor:`${colors.triadic}`}}/>\r\n                    <div style={{backgroundColor:`${colors.triadic}`}}/>\r\n                    <div style={{backgroundColor:`${colors.triadic}`}}/>\r\n\r\n                <div className='title' style={{backgroundColor:`${colors.analogo2}88`}}>\r\n                    <h1>\r\n                        {infor.title.split('_').map(value=>` ${value}`)}\r\n                    </h1>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"body\">\r\n                <div className='description'>\r\n                    <h2>Description</h2>\r\n                    <i>\r\n                    {infor.description.map(value=>\r\n                        typeof value ===typeof []?\r\n                        <ol>\r\n                        {\r\n                            value.map(\r\n                               value=>\r\n                               typeof value ===typeof []?\r\n                               <ul>\r\n                                    {value.map(value=>\r\n                                typeof value ===typeof []?\r\n                                <ol>\r\n                                    {value.map(\r\n                                        value=><li>{value}</li>\r\n                                    )}\r\n                                </ol>\r\n                                :<li>{value}</li>\r\n                                )}\r\n                               </ul>:\r\n                               <li>{value}</li>\r\n\r\n                            )\r\n                        }\r\n                    </ol>\r\n                    :<p>{value}</p>)}\r\n                    </i>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"footer\">\r\n                powered by <a href='https://jecrs687.github.io' style={{color:`${colors.primary}`}}>@jecrs687</a>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\n\r\nexport default function main(){\r\n    return(\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport './main.css'\r\nconst infor = require('../../infor.json')\r\n\r\nexport default function main(){\r\n    return(\r\n        <div className='Site'>\r\n            <div className=\"header\">\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div className='title'>\r\n                    <h1>\r\n                        {infor.title.split('_').map(value=>` ${value}`)}\r\n                    </h1>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"body\">\r\n            </div>\r\n\r\n            <div className=\"footer\">\r\n        rwberb\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport Mobile from './type/mobile/main'\r\nimport Script from './type/script/main'\r\nimport Desktop from './type/desktop/main'\r\nimport Site from './type/site/main'\r\n\r\nconst info = require('./infor.json')\r\nfunction main (){\r\n        switch(info.type){\r\n            case 'mobile':\r\n                return <Mobile/>;\r\n            case 'desktop':\r\n                return <Desktop/>;\r\n            case 'script':\r\n                return <Script/>;\r\n            case 'site':\r\n                return <Site/>;\r\n            default:\r\n                return <Script/>\r\n        }\r\n}\r\nexport default function App(){\r\n    \r\n    return(\r\n        <div className='App'>\r\n            {main()}\r\n        </div>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nconst infor = require ('./infor.json')\n\nfunction Title(){\n    return(\n        infor.title.split('_').map(value=>` ${value}`)\n        )\n}\nfunction Google(){\n    return(\n            <div></div>\n        )\n}\nReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Title/>, document.getElementById('title'));\nReactDOM.render(<Google/>, document.getElementById('google'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}